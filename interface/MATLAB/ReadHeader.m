function ReadHeader(Name,RootPath,Args)
arguments
	Name
	RootPath			= '../..'
	Args.InstallPrefix	= [RootPath '/interface/MATLAB']
	Args.DefMacros		= "BUILD_DOUBLE"
	Args.MKLROOT		= getenv('MKLROOT')
	Args.PkgName		= Name
	Args.Headers		= genHeaders(Name,RootPath)
	Args.Libs			= genLibs(Name,RootPath)
end

clibgen.generateLibraryDefinition(Args.Headers,...
	'Libraries', Args.Libs,...
	'IncludePath', [string([Args.MKLROOT '/include']),...
					string([RootPath '/include'])],...
	'DefinedMacros', Args.DefMacros,...
	'ReturnCArrays', false,...
	'OutputFolder', Args.InstallPrefix,...
	'PackageName', Args.PkgName);
% copyfile(['*' Args.PkgName '*'],[RootPath 'interface/MATLAB']);
% TODO: Automate the define{Name}.mlx uncommenting for specific matlab
% interface methods e.g. HPsi(T*,T*,int,int)
InterfaceMethods = ["const T* getH(int,int) const",...	% Main methods
	"const T* getPsi(int,int) const",...
	"const T* getE(int) const",...
	"T Overlap(T*,T*,int)",...
	"void NormalizePsi(T*,int,bool)",...
	"void HPsi(T*,T*,int,int)",...
	"void PsiHPsi(T*,T*,T*,int,int)",...
	"void UpdateH(T*,int,int)",...
	"const T* getH(int,int,int) const",...			% Auxiliary methods
	"const T* geth(int,int) const",...
	"const T* geth(int,int,int) const",...
	"void getUEx(T*,int,int)",...
	"void getUEx(T*,T*,int,int,int,int)"];
fprintf(['\nFinished generating ' Args.PkgName ' package. '...
	'The files are found at:\n' RootPath '/interface/MATLAB\n\n'...
	'Manually fix the MATLAB interface methods '...
	'before building the interface e.g.:\n'])
for iMethod = InterfaceMethods
	fprintf(strcat(" - ",iMethod,"\n"));
end
end
%% HelperFunctions
function Headers=genHeaders(name, rootPath)
baseH = [rootPath '/include/'];
Headers = [string([baseH name '.h']),...
	string([baseH 'Floq' name '.h']),...
	string([baseH 'HF' name '.h']),...
	string([baseH 'FloqHF' name '.h'])];
end

function Libs=genLibs(name, rootPath)
Libs = [rootPath '/lib/lib' name];
if ismac
	Libs = [Libs '.dylib'];
elseif isunix
	Libs = [Libs '.so'];
else
	warning('Untested for Windows');
	Libs = [Libs '.dll'];
end
end